---
# idempotent loading, only hotload the module if not loaded
- name: Get value of already loaded module
  command: sysctl -n {{ item.1.key }}
  loop: "{{ sysctl.dropin | dict2items | flatten_item | subelements('value') }}"
  register: sysctl_modules_loaded
  changed_when: False

- set_fact:
    sysctl_dropin_value_current: |
      {%- set family = item.item.0.key -%}
      {%- set key = item.item.1.key -%}
      {%- set value = item.stdout -%}
      {%- if value.isdigit() -%}
        {%- set value = item.stdout | int -%}
      {%- endif -%}
      {%- if sysctl_dropin_value_current[family] is defined -%}
        {%- set ret= sysctl_dropin_value_current[family] -%}
          {%- set ignored = ret.update({key: value}|combine(ret)) -%}
        {%- set ignored = sysctl_dropin_value_current.update({family: ret}) -%}
      {%- else -%}
        {%- set ret= dict() -%}
        {%- set ignored = ret.update({key: value}|combine(ret)) -%}
        {%- set ignored = sysctl_dropin_value_current.update({family: ret}) -%}
      {%- endif -%}
      {{ sysctl_dropin_value_current }}
  loop: "{{ sysctl_modules_loaded.results }}"

# Now we need to create a diff between new and actual state
- set_fact:
    sysctl_dropin_value_changed: "{{ sysctl_dropin_value_current | compare_dict_changed(sysctl.dropin) }}"

- debug:
    msg:
      - "sysctl values need upgrade:"
      - "{{ sysctl_dropin_value_changed }}"
  changed_when: sysctl_dropin_value_changed|length > 0
  when:
    - sysctl_dropin_value_changed|length > 0
  notify:
    - Upgrade sysctl values
